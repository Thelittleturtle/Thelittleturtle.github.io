{"version":3,"sources":["responsive/Device.js","components/SearchCity.js","components/SmallLabel.js","components/Text.js","components/ForecastHour.js","components/ResultFadeIn.js","components/LargeLabel.js","components/MediumLabel.js","components/Result.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","SearchBar","styled","form","showResult","SearchInput","input","SearchIcon","span","SearchCity","submit","value","change","onSubmit","type","placeholder","onChange","icon","faSearch","SmallLabel","h4","color","weight","fontSize","align","firstToUpperCase","Text","ForecastWrapper","div","WeatherIcon","img","ForecastHour","props","temp","month","day","hour","iconUrl","src","ResultFadeIn","keyframes","BigLabel","h2","h3","Results","LocationWrapper","CurrentWeatherWrapper","TemperatureWrapper","Temperature","CurrentDetailWeather","WeatherDetail","ForeCast","Result","weather","city","country","date","description","main","sunset","sunrise","humidity","wind","highestTemp","lowestTemp","forecast","console","log","forecasts","map","item","key","dt","Math","floor","dt_txt","slice","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","NotFoundWrapper","NotfoundIcon","NotFoundText","NotFound","faFrown","AppTitle","h1","showLabel","secondary","WeatherWrapper","App","state","weatherInfo","error","handleInputChange","e","setState","target","handleSearchCity","preventDefault","APIkey","process","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","name","temp_max","temp_min","clouds","speed","list","catch","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0ecbbcb6.chunk.js","sourcesContent":["const size = {\r\n    mobileS: '320px',\r\n    mobileM: '375px',\r\n    mobileL: '525px',\r\n    tablet: '768px',\r\n    laptop: '1024px',\r\n    laptopL: '1440px',\r\n    desktop: '2560px',\r\n};\r\n\r\nconst device = {\r\n    mobileS: `(min-width: ${size.mobileS})`,\r\n    mobileM: `(min-width: ${size.mobileM})`,\r\n    mobileL: `(min-width: ${size.mobileL})`,\r\n    tablet: `(min-width: ${size.tablet})`,\r\n    laptop: `(min-width: ${size.laptop})`,\r\n    laptopL: `(min-width: ${size.laptopL})`,\r\n    desktop: `(min-width: ${size.desktop})`,\r\n    desktopL: `(min-width: ${size.desktop})`,\r\n};\r\n\r\nexport default device;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport device from '../responsive/Device';\r\n\r\n\r\nconst SearchBar = styled.form`\r\n    top: ${({showResult}) => (showResult ? '0%' : '30%' )};\r\n    position: relative;\r\n    margin: 0 auto;\r\n    max-width: 500px;\r\n    transition: 0.8s 0.5s;\r\n    @media ${device.laptopL} {\r\n        max-width: 600px;\r\n    }\r\n    @media ${device.desktop} {\r\n        max-width: 700px;\r\n    }\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n    width: 100%;\r\n    border: none;\r\n    background-color: #ffffff;\r\n    font-size: 16px;\r\n    padding: 10px 15px 10px 40px;\r\n    color: #c5c5c5;\r\n    trasition: 0.2s;\r\n    border-radius: 20px;\r\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n    &:focus {\r\n        color: #191919;\r\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n        outline: none;\r\n    }\r\n    @media ${device.tablet} {\r\n        font-size: 18px;\r\n    }\r\n    @media ${device.laptop} {\r\n        padding: 15px 20px 15px 45px;\r\n        border-radius: 30px;\r\n    }\r\n`;\r\n\r\nconst SearchIcon = styled.span`\r\n    display: block;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 22px;\r\n    transform: translate(-50%,-50%);\r\n    height: 14px;\r\n    width: 14px;\r\n    font-size: 14px;\r\n    color: #c5c5c5;\r\n    @media ${device.tablet} {\r\n        height: 15px;\r\n        width: 15px;\r\n        font-size: 15px;\r\n    }\r\n    @media ${device.laptop} {\r\n        height: 16px;\r\n        width: 16px;\r\n        font-size: 16px;\r\n    }\r\n`\r\n\r\nconst SearchCity = ({submit, value, change, showResult}) => {\r\n    return(\r\n        <>\r\n            <SearchBar showResult={showResult} onSubmit={submit}>\r\n                <SearchInput type='text' value={value} placeholder=\"Enter city\" onChange={change}/>\r\n                <SearchIcon>\r\n                    <FontAwesomeIcon icon={faSearch}/>\r\n                </SearchIcon>\r\n            </SearchBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchCity","import styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst SmallLabel = styled.h4`\r\n  color: ${({ color }) => color || '#FFFFFF'};\r\n  display: block;\r\n  font-weight: ${({ weight }) => weight || '600'};\r\n  font-size: ${({ fontSize }) => fontSize || '15px'};\r\n  text-align: ${({ align }) => align || 'left'};\r\n  padding: 5px 0;\r\n  ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n  &:first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n  `}\r\n  @media ${device.tablet} {\r\n    font-size: ${({ fontSize }) => fontSize || '20px'};\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: ${({ fontSize }) => fontSize || '23px'};\r\n  }\r\n  @media ${device.laptopL} {\r\n    font-size: ${({ fontSize }) => fontSize || '26px'};\r\n  }\r\n`;\r\n\r\nexport default SmallLabel;\r\n","import styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst Text = styled.span`\r\n    color: ${({ color }) => color || '#ffffff'};\r\n    display: block;\r\n    font-size: ${({ fontSize }) => fontSize || '12px'};\r\n    text-align: ${({ align }) => align || 'left'};\r\n    ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n    &:first-letter {\r\n        text-transform: uppercase;\r\n    }\r\n    `}\r\n    @media ${device.tablet} {\r\n        font-size: ${({ fontSize }) => fontSize || '15px'};\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: ${({ fontSize }) => fontSize || '17px'};\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: ${({ fontSize }) => fontSize || '19px'};\r\n    }\r\n`;\r\n\r\nexport default Text;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SmallLabel from './SmallLabel';\r\nimport Text from './Text';\r\nimport device from '../responsive/Device';\r\n\r\n\r\nconst ForecastWrapper = styled.div`\r\n    flex-shrink: 0;\r\n    flex-basis: 90px;\r\n    padding: 10px;\r\n    margin: 0 5px;\r\n    border-radius: 5px;\r\n    background-color: rgba(255, 255, 255, 0.2);\r\n    &:first-child {\r\n        margin-left: 0;\r\n    }\r\n    &:last-child {\r\n        margin-right: 0;\r\n    }\r\n    @media ${device.tablet} {\r\n        flex-basis: 110px;\r\n    }\r\n    @media ${device.laptop} {\r\n        flex-basis: 125px;\r\n    }\r\n    @media ${device.laptopL} {\r\n        flex-basis: 140px;\r\n    }\r\n`;\r\n\r\nconst WeatherIcon = styled.img`\r\n    display: block;\r\n    width: 50px;\r\n    height: 50px;\r\n    margin: 0 auto;\r\n`\r\n\r\nconst ForecastHour = (props) => {\r\n    const { temp, month, day, hour, icon } = props;\r\n    const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n    return (\r\n        <ForecastWrapper>\r\n            <Text align='center'>\r\n                {month}.{day}\r\n            </Text>\r\n            <Text align='center' > {hour}:00</Text>\r\n            <WeatherIcon src={iconUrl}/>\r\n            <SmallLabel align='center' weight='400'>\r\n                {temp}&#176;\r\n            </SmallLabel>\r\n        </ForecastWrapper>\r\n    )\r\n}\r\n\r\nexport default ForecastHour","import { keyframes } from 'styled-components';\r\n\r\nconst ResultFadeIn = keyframes`\r\n    to {\r\n        opacity: 1;\r\n        visibility: visible;\r\n        top: 0;\r\n    }`;\r\n\r\nexport default ResultFadeIn;","import styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst BigLabel = styled.h2`\r\n  color: ${({ color }) => color || '#FFFFFF'};\r\n  display: block;\r\n  font-weight: ${({ weight }) => weight || '600'};\r\n  font-size: ${({ fontSize }) => fontSize || '30px'};\r\n  text-align: ${({ align }) => align || 'left'};\r\n  padding: 5px 0;\r\n  ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n  &:first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n  `}\r\n  @media ${device.tablet} {\r\n    font-size: ${({ fontSize }) => fontSize || '37px'};\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: ${({ fontSize }) => fontSize || '43px'};\r\n  }\r\n  @media ${device.laptopL} {\r\n    font-size: ${({ fontSize }) => fontSize || '52px'};\r\n  }\r\n`;\r\n\r\nexport default BigLabel;\r\n","import styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst MediumLabel = styled.h3`\r\n  color: ${({ color }) => color || '#FFFFFF'};\r\n  display: block;\r\n  font-weight: ${({ weight }) => weight || '600'};\r\n  font-size: ${({ fontSize }) => fontSize || '20px'};\r\n  text-align: ${({ align }) => align || 'left'};\r\n  padding: 5px 0;\r\n  ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n  &:first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n  `}\r\n  @media ${device.tablet} {\r\n    font-size: ${({ fontSize }) => fontSize || '23px'};\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: ${({ fontSize }) => fontSize || '26px'};\r\n  }\r\n  @media ${device.laptopL} {\r\n    font-size: ${({ fontSize }) => fontSize || '29px'};\r\n  }\r\n`;\r\n\r\nexport default MediumLabel;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faCloud,\r\n    faBolt,\r\n    faCloudRain,\r\n    faCloudShowersHeavy,\r\n    faSnowflake,\r\n    faSun,\r\n    faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport device from '../responsive/Device';\r\nimport ForecastHour from './ForecastHour';\r\nimport ResultFadeIn from './ResultFadeIn';\r\nimport BigLabel from './LargeLabel';\r\nimport MediumLabel from './MediumLabel';\r\nimport SmallLabel from './SmallLabel';\r\nimport Text from './Text';\r\n\r\nconst Results = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    padding: 40px 0;\r\n    opactiy: 0;\r\n    visibility: hidden;\r\n    position: relative;\r\n    top: 20px;\r\n    animation: ${ResultFadeIn} 0.5s 1.4s forwards;\r\n`;\r\n\r\nconst LocationWrapper = styled.div`\r\n    flex-basis: 100%;\r\n`;\r\n\r\nconst CurrentWeatherWrapper = styled.div`\r\n    flex-basis: 100%;\r\n    display: grid;\r\n    justify-content: center;\r\n    align-items: center;\r\n    grid-template-columns: auto 1fr;\r\n    margin: 20px 0;\r\n    grid-gap: 30px;\r\n    @media ${device.mobileL} {\r\n        flex-basis: 50%;\r\n        padding-right: 10px;\r\n    }\r\n    @media ${device.tablet} {\r\n        grid-template-columns: 1fr 1fr;\r\n        padding-right: 20px;\r\n    }\r\n`;\r\n\r\nconst WeatherIcon = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items; center;\r\n    color: #ffffff;\r\n    font-size: 70px;\r\n    @media ${device.tablet} {\r\n        font-size: 100px;\r\n        justify-content: flex-end;\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: 120px;\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: 140px;\r\n    }\r\n`;\r\n\r\nconst TemperatureWrapper = styled.div``;\r\n\r\nconst Temperature = styled.h3`\r\n    display: block;\r\n    font-size: 60px;\r\n    font-weight: 400;\r\n    color: #ffffff;\r\n    @media ${device.tablet} {\r\n    font-size: 70px;\r\n    }\r\n    @media ${device.laptop} {\r\n    font-size: 90px;\r\n    }\r\n    @media ${device.laptopL} {\r\n    font-size: 110px;\r\n    }\r\n`;\r\n\r\nconst CurrentDetailWeather = styled.div`\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    background-color: rgba(255,255,255,0.2);\r\n    flex-wrap: wrap;\r\n    padding: 20px 0;\r\n    margin: 20px 0;\r\n    align-self: flex-start;\r\n    border-radius: 10px;\r\n    @media ${device.mobileL} {\r\n        flex-basis: 50%;\r\n    }\r\n`;\r\n\r\nconst WeatherDetail = styled.div`\r\n    flex-basis: calc(100%/3);\r\n    padding: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media ${device.laptop} {\r\n        padding: 20px 10px;\r\n    }\r\n`;\r\n\r\nconst ForeCast = styled.div`\r\n    display: flex;\r\n    flex-wrap: no-wrap;\r\n    overflow-x: scroll;\r\n    overflow-y: hidden;\r\n`;\r\nconst Result = ({weather}) => {\r\n    const {\r\n        city,\r\n        country,\r\n        date,\r\n        description,\r\n        main,\r\n        temp,\r\n        sunset,\r\n        sunrise,\r\n        humidity,\r\n        wind,\r\n        highestTemp,\r\n        lowestTemp,\r\n        forecast,\r\n    } = weather;\r\n\r\n    console.log(weather);\r\n    const forecasts = forecast.map( item => {\r\n        return(\r\n            <ForecastHour\r\n                key={item.dt}\r\n                temp={Math.floor(item.main.temp)}\r\n                month={item.dt_txt.slice(5,7)}\r\n                day={item.dt_txt.slice(8,10)}\r\n                hour={item.dt_txt.slice(11,13)*1}\r\n                icon={item.weather[0].icon}\r\n            />\r\n        )\r\n    })\r\n    let weatherIcon = null;\r\n\r\n    if (main === 'Thunderstorm') {\r\n        weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n    } else if (main === 'Drizzle') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n    } else if (main === 'Rain') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n    } else if (main === 'Snow') {\r\n        weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n    } else if (main === 'Clear') {\r\n        weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n    } else if (main === 'Clouds') {\r\n        weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n    } else {\r\n        weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n    }\r\n\r\n    return(\r\n        <Results>\r\n            <LocationWrapper>\r\n                <BigLabel>\r\n                    {city}, {country}\r\n                </BigLabel>\r\n                <Text>\r\n                    {date}\r\n                </Text>\r\n            </LocationWrapper>\r\n            <CurrentWeatherWrapper>\r\n                <WeatherIcon>\r\n                    {weatherIcon}\r\n                </WeatherIcon>\r\n                <TemperatureWrapper>\r\n                    <Temperature>\r\n                        {Math.floor(temp)}&#176;\r\n                    </Temperature>\r\n                    <SmallLabel firstToUpperCase >\r\n                        {description}\r\n                    </SmallLabel>\r\n                </TemperatureWrapper>\r\n            </CurrentWeatherWrapper>\r\n            <CurrentDetailWeather>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {Math.floor(highestTemp)}&#176;\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        High\r\n                    </Text>\r\n                </WeatherDetail>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {wind}mph\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        Wind\r\n                    </Text>\r\n                </WeatherDetail>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {sunrise}\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        Sunrise\r\n                    </Text>\r\n                </WeatherDetail>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {Math.floor(lowestTemp)}&#176;\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        Low\r\n                    </Text>\r\n                </WeatherDetail>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {humidity}\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        Rain\r\n                    </Text>\r\n                </WeatherDetail>\r\n                <WeatherDetail>\r\n                    <SmallLabel>\r\n                        {sunset}\r\n                    </SmallLabel>\r\n                    <Text>\r\n                        Sunset\r\n                    </Text>\r\n                </WeatherDetail>\r\n            </CurrentDetailWeather>\r\n            <ForeCast>\r\n                {forecasts}\r\n            </ForeCast>\r\n        </Results>\r\n    )\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ResultFadeIn from './ResultFadeIn';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst NotFoundWrapper = styled.div`\r\n    max-width: 600px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 100px auto 0;\r\n    padding: 20px;\r\n    position: relative;\r\n    border-radius: 10px;\r\n    top: 20px;\r\n    background-color: rgba(255,255,255,0.3);\r\n    animation: ${ ResultFadeIn } 0.5s 1.4s forwards;\r\n`;\r\n\r\nconst NotfoundIcon = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  font-size: 40px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst NotFoundText = styled.span`\r\n    color: #ffffff;\r\n    font-size: 17px;\r\n`;\r\n\r\nconst NotFound = () => {\r\n    return(\r\n        <NotFoundWrapper>\r\n            <NotfoundIcon>\r\n                <FontAwesomeIcon icon ={ faFrown }/>\r\n            </NotfoundIcon>\r\n            <NotFoundText>\r\n                Sorry, the specified city was not found.\r\n            </NotFoundText>\r\n        </NotFoundWrapper>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React from 'react';\nimport SearchCity from './SearchCity';\nimport styled from 'styled-components';\nimport Result from './Result';\nimport NotFound from './NotFound';\nimport device from '../responsive/Device';\n\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  padding: 20px 0;\n  font-size: 30px;\n  font-weight: 400;\n  text-transform: uppercase;\n  color: #ffffff;\n  transition: 0.3s 1.4s;\n  opacity: ${({showLabel}) => (showLabel ? 1 : 0)};\n\n  ${({ secondary }) =>\n    secondary&&\n    `\n    opacity: 1;\n    height: auto;\n    text-align:center;\n    position: relative;\n    padding: 20px 0;\n    font-size: 30px;\n    top: 20%;\n    transition: 0.5s;\n    @media ${device.tablet} {\n      font-size: 40px;\n    }\n    @media ${device.laptop} {\n      font-size: 50px;\n    }\n    @media ${device.laptopL} {\n      font-size: 60px;\n    }\n    @media ${device.desktop} {\n      font-size: 70px;\n    }\n  `}\n\n  ${({ showResult }) =>\n    showResult &&\n    `\n      opacity: 0;\n      visibility: hidden;\n      top: 10%;\n    `}\n`;\nconst WeatherWrapper = styled.div`\n  max-width: 1500px;\n  margin: 0 auto;\n  height: calc(100vh - 64px);\n  width: 100%;\n  position: relative;\n`;\nclass App extends React.Component {\n  state = {\n    value: '',\n    weatherInfo: null,\n    error: false\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  handleSearchCity = e => {\n    e.preventDefault();\n    const {value} = this.state;\n    const APIkey = process.env.REACT_APP_API_KEY;\n\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\n\n    Promise.all([fetch(weather),fetch(forecast)])\n      .then(([res1, res2]) => {\n        if (res1.ok && res2.ok) {\n          return Promise.all([res1.json(), res2.json()])\n        }\n        throw Error(res1.statusText, res2.statusText)\n      })\n      .then(([data1, data2]) => {\n        const months = [\n          'January',\n          'February',\n          'March',\n          'April',\n          'May',\n          'June',\n          'July',\n          'August',\n          'September',\n          'October',\n          'Nocvember',\n          'December',\n        ];\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        const currentDate = new Date();\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()}\n        ${months[currentDate.getMonth()]}`;\n\n        const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\n        const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\n\n        const weatherInfo = {\n          city: data1.name,\n          country: data1.sys.country,\n          date,\n          description: data1.weather[0].description,\n          main: data1.weather[0].main,\n          temp: data1.main.temp,\n          highestTemp: data1.main.temp_max,\n          lowestTemp: data1.main.temp_min,\n          sunrise,\n          sunset,\n          clouds: data1.clouds.all,\n          humidity: data1.main.humidity,\n          wind: data1.wind.speed,\n          forecast: data2.list,\n        };\n\n        this.setState({\n          weatherInfo: weatherInfo,\n          error: false\n        });\n        console.log(this.state);\n      })\n      .catch(error => {\n        console.log(error);\n\n        this.setState({\n          error: true,\n          weatherInfo: null,\n        });\n      })\n  }\n  render() {\n    const {value, weatherInfo, error} = this.state;\n    return(\n      <>\n        <AppTitle showLabel={weatherInfo || error && true}>\n          Weather app\n        </AppTitle>\n        <WeatherWrapper>\n          <AppTitle secondary showResult={weatherInfo||error&&true}>\n            Weather App\n          </AppTitle>\n          <SearchCity\n            value={value}\n            showResult={weatherInfo || error && true}\n            change={this.handleInputChange}\n            submit={this.handleSearchCity}\n          >\n          </SearchCity>\n          {weatherInfo && <Result weather={weatherInfo}/>}\n          {error && <NotFound error={error}/>}\n        </WeatherWrapper>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('weather-app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}